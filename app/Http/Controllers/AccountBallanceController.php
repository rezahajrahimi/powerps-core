<?php
bolt_decrypt( __FILE__ , '5s9Yu3'); return 0;
##!!!##