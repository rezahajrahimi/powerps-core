<?php
bolt_decrypt( __FILE__ , 'zY5mND'); return 0;
##!!!##