<?php
bolt_decrypt( __FILE__ , 'YfCRp3'); return 0;
##!!!##