<?php
bolt_decrypt( __FILE__ , 'UdQR4Z'); return 0;
##!!!##