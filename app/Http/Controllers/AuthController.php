<?php
bolt_decrypt( __FILE__ , 'je0z9E'); return 0;
##!!!##