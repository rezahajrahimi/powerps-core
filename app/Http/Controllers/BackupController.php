<?php
bolt_decrypt( __FILE__ , 'fM8QdB'); return 0;
##!!!##