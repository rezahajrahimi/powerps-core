<?php
bolt_decrypt( __FILE__ , 'VGAXhY'); return 0;
##!!!##