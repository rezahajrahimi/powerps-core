<?php
bolt_decrypt( __FILE__ , '6vw6dC'); return 0;
##!!!##Cm5hbWVzcGFjZSBBcHBcSHR0cFxDb250cm9sbGVyczsKCnVzZSBJbGx1bWluYXRlXEh0dHBcUmVxdWVzdDsKCmNsYXNzIEJvdEdlbmVyYWxDb250cm9sbGVyIGV4dGVuZHMgQ29udHJvbGxlcgp7CiAgICBwdWJsaWMgZnVuY3Rpb24gX19jb25zdHJ1Y3QoKQogICAgewogICAgfQogICAgLy8vIGNoZWNrICBkb2xsYXJQYXkgaXMgdmFsaWQgb3Igbm90CiAgICBwdWJsaWMgZnVuY3Rpb24gY2hlY2tEb2xsYXJQYXkoKQogICAgewogICAgICAgICR0clNldHRpbmdDbnRybCA9IG5ldyBUcmFuc2FjdGlvblNldHRpbmdDb250cm9sbGVyKCk7CgogICAgICAgIHJldHVybiAkdHJTZXR0aW5nQ250cmwtPmdldERvbGxvclRyYW5zYWN0aW9uU2V0dGluZygpOwogICAgfQogICAgcHVibGljIGZ1bmN0aW9uIGhvd190b191c2VfbWVudSgkY2hhdF9pZCkKICAgIHsKICAgICAgICB0cnkgewogICAgICAgICAgICAkb3ByID0gW107CiAgICAgICAgICAgIGFycmF5X3B1c2goJG9wciwgWwogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICd0ZXh0JyAgICAgICAgICA9PiAn2KLZhdmI2LLYtCDYp9iz2KrZgdin2K/ZhycsCiAgICAgICAgICAgICAgICAgICAgJ2NhbGxiYWNrX2RhdGEnID0+ICdoZWxwLWZhcXMnLAogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgXSk7CiAgICAgICAgICAgIGFycmF5X3B1c2goJG9wciwgWwogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICd0ZXh0JyAgICAgICAgICA9PiAn2KjYsdmG2KfZhdmHINmH2KfbjCDZhdmI2LHYryDZhtuM2KfYsicsCiAgICAgICAgICAgICAgICAgICAgJ2NhbGxiYWNrX2RhdGEnID0+ICdoZWxwLWFwcERvd25sb2FkJywKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgIF0pOwogICAgICAgICAgICAkdGV4dCAgID0gJ9uM2qkg2q/YstuM2YbZhyDYsdinINin2YbYqtiu2KfYqCDaqdmG24zYry4nOwogICAgICAgICAgICAkcmVzdWx0ID0gYXBwKCd0ZWxlZ3JhbV9ib3QnKS0+Y29tbWFuZE1lc3NhZ2UoJG9wciwgJGNoYXRfaWQsICR0ZXh0KTsKCiAgICAgICAgICAgIHJldHVybiAkcmVzdWx0OwogICAgICAgIH0gY2F0Y2ggKFxUaHJvd2FibGUgJHRoKSB7CiAgICAgICAgICAgIFxMb2c6OmluZm8oImhvd190b191c2VfbWVudSAkdGgiKTsKCiAgICAgICAgICAgIHJldHVybiAkdGg7CiAgICAgICAgfQogICAgfQogICAgcHVibGljIGZ1bmN0aW9uIGluY3JlYXNlX2FjY291bnRfYmFsbGFuY2VfbWVudV9vbl9sb3dfYmFsYW5jZSgkY2hhdF9pZCwgJGVzdGltYXRlZFByaWNlLCAkZXN0aW1hdGVkUHJpY2VJbkRvbGxhcikKICAgIHsKICAgICAgICB0cnkgewogICAgICAgICAgICAkYmlsbENudHJsICAgICAgICAgICA9IG5ldyBCaWxsQ29udHJvbGxlcigpOwogICAgICAgICAgICAkcmVxdWVzdCAgICAgICAgICAgICA9IG5ldyBSZXF1ZXN0KCk7CiAgICAgICAgICAgICRyZXF1ZXN0LT5hY2NvdW50X2lkID0gJGNoYXRfaWQ7CiAgICAgICAgICAgICRyZXF1ZXN0LT5hbW91bnQgICAgID0gJGVzdGltYXRlZFByaWNlOwogICAgICAgICAgICAkYmlsbCAgICAgICAgICAgICAgICA9ICRiaWxsQ250cmwtPmNyZWF0ZU5ld0JpbGwoJHJlcXVlc3QpOwoKICAgICAgICAgICAgLy8gc2VudCBvbmxpbmUgcGF5bWVudAogICAgICAgICAgICAkb3ByID0gW107CgogICAgICAgICAgICAvLyBjaGVjayBpZiB6YXJpbnBhbAogICAgICAgICAgICAkcHltQ250cmwgPSBuZXcgUGF5bWVudFR5cGVDb250cm9sbGVyKCk7CgogICAgICAgICAgICAkaGFzWmFyaW5QYWwgPSAkcHltQ250cmwtPmdldFphcmlucGFsU3RhdHVzKCk7CiAgICAgICAgICAgIGlmICgkaGFzWmFyaW5QYWwgPT0gdHJ1ZSB8fCAkaGFzWmFyaW5QYWwgPT0gMSkgewogICAgICAgICAgICAgICAgLy8gc2VuZCBsaW5rCgogICAgICAgICAgICAgICAgLy8gJG9wZW5MaW5rID0gImh0dHBzOi8vZ29vZ2xvb29saS5jb20iOwogICAgICAgICAgICAgICAgLy8gJG9wZW5MaW5rID0gJHB5bUNudHJsLT5nZXRaYXJpbnBhbExpbmsoKTsKCiAgICAgICAgICAgICAgICAvLy8vLwogICAgICAgICAgICAgICAgJHRyQ250cmwgICAgICAgICAgICAgICA9IG5ldyBUcmFuc2FjdGlvbkNvbnRyb2xsZXIoKTsKICAgICAgICAgICAgICAgICR0clJlcXVlc3QgICAgICAgICAgICAgPSBuZXcgUmVxdWVzdCgpOwogICAgICAgICAgICAgICAgJHRyUmVxdWVzdC0+aW52b2ljZUlEICA9ICRiaWxsLT5iaWxsX2lkOwogICAgICAgICAgICAgICAgJHRyUmVxdWVzdC0+YWNjb3VudF9pZCA9ICRjaGF0X2lkOwogICAgICAgICAgICAgICAgJHRyUmVxdWVzdC0+YW1vdW50ICAgICA9ICRlc3RpbWF0ZWRQcmljZTsKICAgICAgICAgICAgICAgICRwYXltZW50TGluayAgICAgICAgICAgPSAkdHJDbnRybC0+YWRkX29yZGVyKCR0clJlcXVlc3QpOwoKICAgICAgICAgICAgICAgICRnZW5lcmFsQ250cmwgPSBuZXcgR2VuZXJhbENvbnRyb2xsZXIoKTsKICAgICAgICAgICAgICAgIC8vICAkemFyaW5QYWwgPSAkZ2VuZXJhbENudHJsLT5nZXRfemFyaW5wYWxfcGF5bWVudF9saW5rX2Zyb21faHRtbCgkcGF5bWVudExpbmspOwoKICAgICAgICAgICAgICAgIC8vCgogICAgICAgICAgICAgICAgYXJyYXlfcHVzaCgkb3ByLCBbCiAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAndGV4dCcgPT4gItm+2LHYr9in2K7YqiDYotmG2YTYp9uM2YYgJGVzdGltYXRlZFByaWNlINiq2YjZhdin2YYiLAogICAgICAgICAgICAgICAgICAgICAgICAndXJsJyAgPT4gIiRwYXltZW50TGluayIsCiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIF0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vIGNoZWNrIGlzIGRvbGxhdHBheSBlbmFibGVkIG9yIG5vdAogICAgICAgICAgICBpZiAoJHRoaXMtPmNoZWNrRG9sbGFyUGF5KCkgPT0gdHJ1ZSB8fCAkdGhpcy0+Y2hlY2tEb2xsYXJQYXkoKSA9PSAxKSB7CiAgICAgICAgICAgICAgICAkYW1vdW50ID0gJGVzdGltYXRlZFByaWNlSW5Eb2xsYXI7CgogICAgICAgICAgICAgICAgJHJlcXVlc3QgPSBuZXcgUmVxdWVzdCgpOwoKICAgICAgICAgICAgICAgICRyZXF1ZXN0LT5hY2NvdW50X2lkID0gJGNoYXRfaWQ7CiAgICAgICAgICAgICAgICAkcmVxdWVzdC0+YW1vdW50ICAgICA9ICRhbW91bnQ7CiAgICAgICAgICAgICAgICAkYmlsbENudHJsICAgICAgICAgICA9IG5ldyBCaWxsQ29udHJvbGxlcigpOwoKICAgICAgICAgICAgICAgICRiaWxsID0gJGJpbGxDbnRybC0+Y3JlYXRlTmV3QmlsbEluRG9sbGFyKCRyZXF1ZXN0KTsKCiAgICAgICAgICAgICAgICAkb3BlbkxpbmsgPSAkcHltQ250cmwtPmdldE5vd1BheW1lbnRzTGluaygpOwogICAgICAgICAgICAgICAgLy8vCiAgICAgICAgICAgICAgICAkdHJDcnlwdG9DbnRybCAgICAgICAgID0gbmV3IFRyYW5zYWN0aW9uQ3J5cHRvQ29udHJvbGxlcigpOwogICAgICAgICAgICAgICAgJHRyUmVxdWVzdCAgICAgICAgICAgICA9IG5ldyBSZXF1ZXN0KCk7CiAgICAgICAgICAgICAgICAkdHJSZXF1ZXN0LT5pbnZvaWNlSUQgID0gJGJpbGwtPmJpbGxfaWQ7CiAgICAgICAgICAgICAgICAkdHJSZXF1ZXN0LT5hY2NvdW50X2lkID0gJGNoYXRfaWQ7CiAgICAgICAgICAgICAgICAkdHJSZXF1ZXN0LT5hbW91bnQgICAgID0gJGFtb3VudDsKICAgICAgICAgICAgICAgICRwYXltZW50TGluayAgICAgICAgICAgPSAkdHJDcnlwdG9DbnRybC0+YWRkX29yZGVyX2NyeXB0b19ieV9ub3dwYXltZW50KCR0clJlcXVlc3QpOwoKICAgICAgICAgICAgICAgICRnZW5lcmFsQ250cmwgICA9IG5ldyBHZW5lcmFsQ29udHJvbGxlcigpOwogICAgICAgICAgICAgICAgJG5vd3BheW1lbnRMaW5rID0gJGdlbmVyYWxDbnRybC0+Z2V0X25vd3BheW1lbnRfcGF5bWVudF9saW5rX2Zyb21faHRtbCgkcGF5bWVudExpbmspOwogICAgICAgICAgICAgICAgLy8gLy8vCiAgICAgICAgICAgICAgICBhcnJheV9wdXNoKCRvcHIsIFsKICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICd0ZXh0JyA9PiAi2b7Ysdiv2KfYrtiqINii2YbZhNin24zZhiAkYW1vdW50INiv2YTYp9ixIiwKICAgICAgICAgICAgICAgICAgICAgICAgJ3VybCcgID0+ICIkbm93cGF5bWVudExpbmsiLAogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICBdKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gY2hlY2sgb3ByIGlzIG5vdCBlbXB0eQoKICAgICAgICAgICAgaWYgKGNvdW50KCRvcHIpID4gMCkgewogICAgICAgICAgICAgICAgJHRleHQgICA9ICfbjNqp24wg2KfYsiDYsdmI2LTigIzZh9in24wg2b7Ysdiv2KfYrtiqINix2Kcg2KfZhtiq2K7Yp9ioINqp2YbbjNivLic7CiAgICAgICAgICAgICAgICAkcmVzdWx0ID0gYXBwKCd0ZWxlZ3JhbV9ib3QnKS0+aW5saW5lS2V5Ym9hcmRCdXR0b24oJHRleHQsICRvcHIsICRjaGF0X2lkLCAnJyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIHNlbmQgb2ZmbGluZSBpdGVtCiAgICAgICAgICAgICRvZmZsaW5lUGF5bWVudCA9ICRweW1DbnRybC0+Z2V0QWxsQWN0aXZlT2ZmbGluZVBheW1lbnRUeXBlcygpOwogICAgICAgICAgICBpZiAoJG9mZmxpbmVQYXltZW50ICE9IG51bGwpIHsKICAgICAgICAgICAgICAgICRweW1NZW5DbnRybCA9IG5ldyBQYXltZW50TWVudUl0ZW1Db250cm9sbGVyKCk7CiAgICAgICAgICAgICAgICBpZiAoJGhhc1phcmluUGFsID09IHRydWUgfHwgJGhhc1phcmluUGFsID09IDEgfHwgJHRoaXMtPmNoZWNrRG9sbGFyUGF5KCkgPT0gdHJ1ZSB8fCAkdGhpcy0+Y2hlY2tEb2xsYXJQYXkoKSA9PSAxKSB7CiAgICAgICAgICAgICAgICAgICAgJHRleHQgPSAn2YfZhdqG2YbbjNmGINmF24wg2KrZiNin2YbbjNivINio2Kcg2KfZhtiq2K7Yp9ioINuM2qnbjCDYp9iyINqv2LLbjNmG2Ycg2YfYp9uMINiy24zYsSDZhtiz2KjYqiDYqNmHINm+2LHYr9in2K7YqiDYp9mC2K/Yp9mFINmG2YXYp9uM24zYry4nOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkbWFpbk1lbnUgPSAkcHltTWVuQ250cmwtPmdldFBheW1lbnRUeXBlTWFpbk1lbnVUaXRsZSgpOwogICAgICAgICAgICAgICAgICAgICR0ZXh0ICAgICA9ICRtYWluTWVudS0+YWxpYXNfbmFtZTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAkb3ByID0gW107CgogICAgICAgICAgICAgICAgZm9yZWFjaCAoJG9mZmxpbmVQYXltZW50IGFzICRrZXkgPT4gJHZhbHVlKSB7CiAgICAgICAgICAgICAgICAgICAgYXJyYXlfcHVzaCgkb3ByLCBbWyd0ZXh0JyA9PiAiJHZhbHVlLT5uYW1lIiwgJ2NhbGxiYWNrX2RhdGEnID0+ICJzdWJBY2NvdW50QmFsYW5jZS0kdmFsdWUtPm5hbWUgIl1dKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAkcmVzdWx0ID0gYXBwKCd0ZWxlZ3JhbV9ib3QnKS0+Y29tbWFuZE1lc3NhZ2UoJG9wciwgJGNoYXRfaWQsICR0ZXh0KTsKICAgICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKFxUaHJvd2FibGUgJHRoKSB7CiAgICAgICAgICAgIFxMb2c6OmluZm8oImluY3JlYXNlX2FjY291bnRfYmFsbGFuY2VfbWVudV9vbl9sb3dfYmFsYW5jZSAkdGgiKTsKCiAgICAgICAgICAgIHJldHVybiAkdGg7CiAgICAgICAgfQogICAgfQp9Cg==