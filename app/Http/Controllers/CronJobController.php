<?php
bolt_decrypt( __FILE__ , 'JfdW8e'); return 0;
##!!!##