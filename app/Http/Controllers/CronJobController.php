<?php
bolt_decrypt( __FILE__ , 'OuGjAR'); return 0;
##!!!##