<?php
bolt_decrypt( __FILE__ , '4DgbiA'); return 0;
##!!!##