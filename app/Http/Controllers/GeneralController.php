<?php
bolt_decrypt( __FILE__ , '2Qsq2I'); return 0;
##!!!##