<?php
bolt_decrypt( __FILE__ , 'SHx0Js'); return 0;
##!!!##Cm5hbWVzcGFjZSBBcHBcSHR0cFxDb250cm9sbGVyczsKCnVzZSBBcHBcTW9kZWxzXEdpZnRDYXJkOwp1c2UgQ2FyYm9uXENhcmJvbjsKdXNlIElsbHVtaW5hdGVcSHR0cFxSZXF1ZXN0Owp1c2UgVmVydGE7CgpjbGFzcyBHaWZ0Q2FyZENvbnRyb2xsZXIgZXh0ZW5kcyBDb250cm9sbGVyCnsKICAgIHB1YmxpYyBmdW5jdGlvbiBjcmVhdGVOZXdHaWZ0Q2FyZChSZXF1ZXN0ICRyZXF1ZXN0KQogICAgewogICAgICAgICRnaWZ0Q2FyZCA9IEdpZnRDYXJkOjp3aGVyZSgnY29kZScsICRyZXF1ZXN0LT5jb2RlKS0+Zmlyc3QoKTsKICAgICAgICBpZiAoJGdpZnRDYXJkKSB7CiAgICAgICAgICAgIHJldHVybiByZXNwb25zZSgpLT5qc29uKCdkdXBsaWNhdGUnLCA0MDEpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICRnaWZ0Q2FyZCAgICAgICAgICAgICAgICAgICAgICAgID0gbmV3IEdpZnRDYXJkKCk7CiAgICAgICAgICAgICRnaWZ0Q2FyZC0+Y29kZSAgICAgICAgICAgICAgICAgID0gJHJlcXVlc3QtPmNvZGU7CiAgICAgICAgICAgICRnaWZ0Q2FyZC0+c3RhcnRfZGF0ZSAgICAgICAgICAgID0gJHJlcXVlc3QtPnN0YXJ0X2RhdGU7CiAgICAgICAgICAgICRnaWZ0Q2FyZC0+ZW5kX2RhdGUgICAgICAgICAgICAgID0gJHJlcXVlc3QtPmVuZF9kYXRlOwogICAgICAgICAgICAkZ2lmdENhcmQtPmRpc2NvdW50ICAgICAgICAgICAgICA9ICRyZXF1ZXN0LT5kaXNjb3VudDsKICAgICAgICAgICAgJGdpZnRDYXJkLT5jb3VudF9vZl91c2UgICAgICAgICAgPSAkcmVxdWVzdC0+Y291bnRfb2ZfdXNlOwogICAgICAgICAgICAkZ2lmdENhcmQtPmNvdW50X29mX3VzZV9wZXJfdXNlciA9ICRyZXF1ZXN0LT5jb3VudF9vZl91c2VfcGVyX3VzZXI7CiAgICAgICAgICAgICRnaWZ0Q2FyZC0+c2F2ZSgpOwogICAgICAgICAgICByZXR1cm4gJGdpZnRDYXJkOwogICAgICAgIH0KICAgIH0KICAgIHB1YmxpYyBmdW5jdGlvbiBnZXRHaWZ0Q2FyZExpc3QoKQogICAgewogICAgICAgIHJldHVybiBHaWZ0Q2FyZDo6YWxsKCk7CiAgICB9CiAgICBwdWJsaWMgZnVuY3Rpb24gdXBkYXRlR2lmdENhcmQoUmVxdWVzdCAkcmVxdWVzdCkKICAgIHsKICAgICAgICAkZ2lmdENhcmQgPSBHaWZ0Q2FyZDo6d2hlcmUoJ2NvZGUnLCAkcmVxdWVzdC0+Y29kZSktPmZpcnN0KCk7CiAgICAgICAgaWYgKCRnaWZ0Q2FyZCkgewogICAgICAgICAgICAkZ2lmdENhcmQtPmNvZGUgICAgICAgICAgICAgICAgICA9ICRyZXF1ZXN0LT5jb2RlOwogICAgICAgICAgICAkZ2lmdENhcmQtPnN0YXJ0X2RhdGUgICAgICAgICAgICA9ICRyZXF1ZXN0LT5zdGFydF9kYXRlOwogICAgICAgICAgICAkZ2lmdENhcmQtPmVuZF9kYXRlICAgICAgICAgICAgICA9ICRyZXF1ZXN0LT5lbmRfZGF0ZTsKICAgICAgICAgICAgJGdpZnRDYXJkLT5kaXNjb3VudCAgICAgICAgICAgICAgPSAkcmVxdWVzdC0+ZGlzY291bnQ7CiAgICAgICAgICAgICRnaWZ0Q2FyZC0+Y291bnRfb2ZfdXNlICAgICAgICAgID0gJHJlcXVlc3QtPmNvdW50X29mX3VzZTsKICAgICAgICAgICAgJGdpZnRDYXJkLT5jb3VudF9vZl91c2VfcGVyX3VzZXIgPSAkcmVxdWVzdC0+Y291bnRfb2ZfdXNlX3Blcl91c2VyOwogICAgICAgICAgICAkZ2lmdENhcmQtPnVwZGF0ZSgpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgfQogICAgcHVibGljIGZ1bmN0aW9uIGNoZWNrR2lmdENhcmRBY3RpdmUoJGNvZGUsICR1c2VkQ291bnQpCiAgICB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgJGdpZnRDYXJkID0gR2lmdENhcmQ6OndoZXJlKCdjb2RlJywgJGNvZGUpLT5maXJzdCgpOwoKICAgICAgICAgICAgaWYgKGlzc2V0KCRnaWZ0Q2FyZCkpIHsKICAgICAgICAgICAgICAgICR0b2RheSAgICAgICAgICAgICA9IG5ldyBcRGF0ZVRpbWUoKTsgLy8gVG9kYXkncyBkYXRlCiAgICAgICAgICAgICAgICAkZ2lmdENhcmREYXRlQmVnaW4gPSBuZXcgXERhdGVUaW1lKCRnaWZ0Q2FyZC0+c3RhcnRfZGF0ZSk7CiAgICAgICAgICAgICAgICAkZ2lmdENhcmREYXRlRW5kICAgPSBuZXcgXERhdGVUaW1lKCRnaWZ0Q2FyZC0+ZW5kX2RhdGUpOwoKICAgICAgICAgICAgICAgIGlmICgkdG9kYXkgPj0gJGdpZnRDYXJkRGF0ZUJlZ2luICYmICR0b2RheSA8PSAkZ2lmdENhcmREYXRlRW5kKSB7CgogICAgICAgICAgICAgICAgICAgIGlmICgkZ2lmdENhcmQtPmNvdW50X29mX3VzZSA+PSAkdXNlZENvdW50KSB7CgogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9IGNhdGNoIChcVGhyb3dhYmxlICR0aCkgewogICAgICAgICAgICBcTG9nOjppbmZvKCJ0aCA9PiAkdGgiKTsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwoKICAgICAgICB9CgogICAgfQogICAgcHVibGljIGZ1bmN0aW9uIGdldEdpZnRDYXJkQnlDb2RlKCRjb2RlKQogICAgewogICAgICAgIHJldHVybiBHaWZ0Q2FyZDo6d2hlcmUoJ2NvZGUnLCAkY29kZSktPmZpcnN0KCk7CiAgICB9CiAgICBwdWJsaWMgZnVuY3Rpb24gZ2V0R2lmY2FyZERpc2NvdW50KCRjb2RlKQogICAgewogICAgICAgICRnaWZ0Q2FyZCA9IEdpZnRDYXJkOjp3aGVyZSgnY29kZScsICRjb2RlKS0+Zmlyc3QoKTsKICAgICAgICBpZiAoJGdpZnRDYXJkKSB7CiAgICAgICAgICAgIHJldHVybiAkZ2lmdENhcmQtPmRpc2NvdW50OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiAwOwogICAgICAgIH0KICAgIH0KICAgIHB1YmxpYyBmdW5jdGlvbiBkZWxldGVHaWZ0Q2FyZEJ5Q29kZSgkY29kZSkKICAgIHsKICAgICAgICAkZ2lmdENhcmQgPSBHaWZ0Q2FyZDo6d2hlcmUoJ2NvZGUnLCAkY29kZSktPmZpcnN0KCk7CiAgICAgICAgaWYgKCRnaWZ0Q2FyZCkgewogICAgICAgICAgICAkZ2lmdENhcmQtPmRlbGV0ZSgpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgfQoKICAgIHB1YmxpYyBmdW5jdGlvbiBnZXRNaWxhZHlEYXRlKCRvbGREYXRlKQogICAgewoKICAgICAgICB0cnkgewogICAgICAgICAgICBpZiAoJG9sZERhdGUgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgJHYgPSBleHBsb2RlKCcvJywgJG9sZERhdGUpOwogICAgICAgICAgICAgICAgJHkgPSAkdlswXTsKICAgICAgICAgICAgICAgICRtID0gJHZbMV07CiAgICAgICAgICAgICAgICAkZCA9ICR2WzJdOwoKICAgICAgICAgICAgICAgICRuZXdEYXQgICAgID0gVmVydGE6OmphbGFsaVRvR3JlZ29yaWFuKCR5LCAkbSwgJGQpOwogICAgICAgICAgICAgICAgJGNhciAgICAgICAgPSBuZXcgQ2FyYm9uKCk7CiAgICAgICAgICAgICAgICAkY2FyLT55ZWFyICA9ICRuZXdEYXRbMF07CiAgICAgICAgICAgICAgICAkY2FyLT5tb250aCA9ICRuZXdEYXRbMV07CiAgICAgICAgICAgICAgICAkY2FyLT5kYXkgICA9ICRuZXdEYXRbMl07CiAgICAgICAgICAgICAgICByZXR1cm4gJGNhcjsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgICB9CiAgICAgICAgfSBjYXRjaCAoXFRocm93YWJsZSAkdGgpIHsKICAgICAgICAgICAgaWYgKCRvbGREYXRlICE9IG51bGwpIHsKICAgICAgICAgICAgICAgICR2ID0gZXhwbG9kZSgnLScsICRvbGREYXRlKTsKICAgICAgICAgICAgICAgICR5ID0gJHZbMF07CiAgICAgICAgICAgICAgICAkbSA9ICR2WzFdOwogICAgICAgICAgICAgICAgJGQgPSAkdlsyXTsKCiAgICAgICAgICAgICAgICAkbmV3RGF0ICAgICA9IFZlcnRhOjpqYWxhbGlUb0dyZWdvcmlhbigkeSwgJG0sICRkKTsKICAgICAgICAgICAgICAgICRjYXIgICAgICAgID0gbmV3IENhcmJvbigpOwogICAgICAgICAgICAgICAgJGNhci0+eWVhciAgPSAkbmV3RGF0WzBdOwogICAgICAgICAgICAgICAgJGNhci0+bW9udGggPSAkbmV3RGF0WzFdOwogICAgICAgICAgICAgICAgJGNhci0+ZGF5ICAgPSAkbmV3RGF0WzJdOwogICAgICAgICAgICAgICAgcmV0dXJuICRjYXI7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KfQo=