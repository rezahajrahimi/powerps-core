<?php
bolt_decrypt( __FILE__ , 'ohJBIT'); return 0;
##!!!##CgpuYW1lc3BhY2UgQXBwXEh0dHBcQ29udHJvbGxlcnM7CnVzZSBBcHBcTW9kZWxzXEdpZnRDYXJkOwp1c2UgVmVydGE7CnVzZSBDYXJib25cQ2FyYm9uOwoKdXNlIElsbHVtaW5hdGVcSHR0cFxSZXF1ZXN0OwoKY2xhc3MgR2lmdENhcmRDb250cm9sbGVyIGV4dGVuZHMgQ29udHJvbGxlcgp7CiAgICBwdWJsaWMgZnVuY3Rpb24gY3JlYXRlTmV3R2lmdENhcmQoUmVxdWVzdCAkcmVxdWVzdCkKICAgIHsKICAgICAgICAkZ2lmdENhcmQgPSBHaWZ0Q2FyZDo6d2hlcmUoJ2NvZGUnLCAkcmVxdWVzdC0+Y29kZSktPmZpcnN0KCk7CiAgICAgICAgaWYgKCRnaWZ0Q2FyZCkgewogICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UoKS0+anNvbignZHVwbGljYXRlJywgNDAxKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAkZ2lmdENhcmQgPSBuZXcgR2lmdENhcmQoKTsKICAgICAgICAgICAgJGdpZnRDYXJkLT5jb2RlID0gJHJlcXVlc3QtPmNvZGU7CiAgICAgICAgICAgICRnaWZ0Q2FyZC0+c3RhcnRfZGF0ZSA9ICRyZXF1ZXN0LT5zdGFydF9kYXRlOwogICAgICAgICAgICAkZ2lmdENhcmQtPmVuZF9kYXRlID0gJHJlcXVlc3QtPmVuZF9kYXRlOwogICAgICAgICAgICAkZ2lmdENhcmQtPmRpc2NvdW50ID0gJHJlcXVlc3QtPmRpc2NvdW50OwogICAgICAgICAgICAkZ2lmdENhcmQtPmNvdW50X29mX3VzZSA9ICRyZXF1ZXN0LT5jb3VudF9vZl91c2U7CiAgICAgICAgICAgICRnaWZ0Q2FyZC0+Y291bnRfb2ZfdXNlX3Blcl91c2VyID0gJHJlcXVlc3QtPmNvdW50X29mX3VzZV9wZXJfdXNlcjsKICAgICAgICAgICAgJGdpZnRDYXJkLT5zYXZlKCk7CiAgICAgICAgICAgIHJldHVybiAkZ2lmdENhcmQ7CiAgICAgICAgfQogICAgfQogICAgcHVibGljIGZ1bmN0aW9uIGdldEdpZnRDYXJkTGlzdCgpCiAgICB7CiAgICAgICAgcmV0dXJuIEdpZnRDYXJkOjphbGwoKTsKICAgIH0KICAgIHB1YmxpYyBmdW5jdGlvbiB1cGRhdGVHaWZ0Q2FyZChSZXF1ZXN0ICRyZXF1ZXN0KQogICAgewogICAgICAgICRnaWZ0Q2FyZCA9IEdpZnRDYXJkOjp3aGVyZSgnY29kZScsICRyZXF1ZXN0LT5jb2RlKS0+Zmlyc3QoKTsKICAgICAgICBpZiAoJGdpZnRDYXJkKSB7CiAgICAgICAgICAgICRnaWZ0Q2FyZC0+Y29kZSA9ICRyZXF1ZXN0LT5jb2RlOwogICAgICAgICAgICAkZ2lmdENhcmQtPnN0YXJ0X2RhdGUgPSAkcmVxdWVzdC0+c3RhcnRfZGF0ZTsKICAgICAgICAgICAgJGdpZnRDYXJkLT5lbmRfZGF0ZSA9ICRyZXF1ZXN0LT5lbmRfZGF0ZTsKICAgICAgICAgICAgJGdpZnRDYXJkLT5kaXNjb3VudCA9ICRyZXF1ZXN0LT5kaXNjb3VudDsKICAgICAgICAgICAgJGdpZnRDYXJkLT5jb3VudF9vZl91c2UgPSAkcmVxdWVzdC0+Y291bnRfb2ZfdXNlOwogICAgICAgICAgICAkZ2lmdENhcmQtPmNvdW50X29mX3VzZV9wZXJfdXNlciA9ICRyZXF1ZXN0LT5jb3VudF9vZl91c2VfcGVyX3VzZXI7CiAgICAgICAgICAgICRnaWZ0Q2FyZC0+dXBkYXRlKCk7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICB9CiAgICBwdWJsaWMgZnVuY3Rpb24gY2hlY2tHaWZ0Q2FyZEFjdGl2ZSgkY29kZSwgJHVzZWRDb3VudCkKICAgIHsKICAgICAgICAkZ2lmdENhcmQgPSBHaWZ0Q2FyZDo6d2hlcmUoJ2NvZGUnLCAkY29kZSktPmZpcnN0KCk7CgogICAgICAgIGlmICgkZ2lmdENhcmQpIHsKICAgICAgICAgICAgJHRvZGF5ID0gbmV3IFxEYXRlVGltZSgpOyAvLyBUb2RheSdzIGRhdGUKICAgICAgICAgICAgJGdpZnRDYXJkRGF0ZUJlZ2luID0gbmV3IFxEYXRlVGltZSgkZ2lmdENhcmQtPnN0YXJ0X2RhdGUpOwogICAgICAgICAgICAkZ2lmdENhcmREYXRlRW5kID0gbmV3IFxEYXRlVGltZSgkZ2lmdENhcmQtPmVuZF9kYXRlKTsKCiAgICAgICAgICAgIGlmICgkdG9kYXkgPj0gJGdpZnRDYXJkRGF0ZUJlZ2luICYmICR0b2RheSA8PSAkZ2lmdENhcmREYXRlRW5kKSB7CiAgICAgICAgICAgICAgICBpZiAoJGdpZnRDYXJkLT5jb3VudF9vZl91c2UgPj0gJHVzZWRDb3VudCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogICAgcHVibGljIGZ1bmN0aW9uIGdldEdpZnRDYXJkQnlDb2RlKCRjb2RlKQogICAgewogICAgICAgIHJldHVybiBHaWZ0Q2FyZDo6d2hlcmUoJ2NvZGUnLCAkY29kZSktPmZpcnN0KCk7CiAgICB9CiAgICBwdWJsaWMgZnVuY3Rpb24gZ2V0R2lmY2FyZERpc2NvdW50KCRjb2RlKQogICAgewogICAgICAgICRnaWZ0Q2FyZCA9IEdpZnRDYXJkOjp3aGVyZSgnY29kZScsICRjb2RlKS0+Zmlyc3QoKTsKICAgICAgICBpZiAoJGdpZnRDYXJkKSB7CiAgICAgICAgICAgIHJldHVybiAkZ2lmdENhcmQtPmRpc2NvdW50OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiAwOwogICAgICAgIH0KICAgIH0KICAgIHB1YmxpYyBmdW5jdGlvbiBkZWxldGVHaWZ0Q2FyZEJ5Q29kZSgkY29kZSkKICAgIHsKICAgICAgICAkZ2lmdENhcmQgPSBHaWZ0Q2FyZDo6d2hlcmUoJ2NvZGUnLCAkY29kZSktPmZpcnN0KCk7CiAgICAgICAgaWYgKCRnaWZ0Q2FyZCkgewogICAgICAgICAgICAkZ2lmdENhcmQtPmRlbGV0ZSgpOwogICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgfQoKICAgIHB1YmxpYyBmdW5jdGlvbiBnZXRNaWxhZHlEYXRlKCRvbGREYXRlKQogICAgewoKICAgICAgICB0cnkgewogICAgICAgICAgICBpZiAoJG9sZERhdGUgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgJHYgPSBleHBsb2RlKCcvJywgJG9sZERhdGUpOwogICAgICAgICAgICAgICAgJHkgPSAkdlswXTsKICAgICAgICAgICAgICAgICRtID0gJHZbMV07CiAgICAgICAgICAgICAgICAkZCA9ICR2WzJdOwoKICAgICAgICAgICAgICAgICRuZXdEYXQgPSBWZXJ0YTo6amFsYWxpVG9HcmVnb3JpYW4oJHksICRtLCAkZCk7CiAgICAgICAgICAgICAgICAkY2FyID0gbmV3IENhcmJvbigpOwogICAgICAgICAgICAgICAgJGNhci0+eWVhciA9ICRuZXdEYXRbMF07CiAgICAgICAgICAgICAgICAkY2FyLT5tb250aCA9ICRuZXdEYXRbMV07CiAgICAgICAgICAgICAgICAkY2FyLT5kYXkgPSAkbmV3RGF0WzJdOwogICAgICAgICAgICAgICAgcmV0dXJuICRjYXI7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKFxUaHJvd2FibGUgJHRoKSB7CiAgICAgICAgICAgIGlmICgkb2xkRGF0ZSAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICAkdiA9IGV4cGxvZGUoJy0nLCAkb2xkRGF0ZSk7CiAgICAgICAgICAgICAgICAkeSA9ICR2WzBdOwogICAgICAgICAgICAgICAgJG0gPSAkdlsxXTsKICAgICAgICAgICAgICAgICRkID0gJHZbMl07CgogICAgICAgICAgICAgICAgJG5ld0RhdCA9IFZlcnRhOjpqYWxhbGlUb0dyZWdvcmlhbigkeSwgJG0sICRkKTsKICAgICAgICAgICAgICAgICRjYXIgPSBuZXcgQ2FyYm9uKCk7CiAgICAgICAgICAgICAgICAkY2FyLT55ZWFyID0gJG5ld0RhdFswXTsKICAgICAgICAgICAgICAgICRjYXItPm1vbnRoID0gJG5ld0RhdFsxXTsKICAgICAgICAgICAgICAgICRjYXItPmRheSA9ICRuZXdEYXRbMl07CiAgICAgICAgICAgICAgICByZXR1cm4gJGNhcjsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9Cg==