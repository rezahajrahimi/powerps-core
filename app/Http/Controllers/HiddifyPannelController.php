<?php
bolt_decrypt( __FILE__ , '8Fmx5S'); return 0;
##!!!##