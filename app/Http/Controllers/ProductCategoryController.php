<?php
bolt_decrypt( __FILE__ , 'cLs4YH'); return 0;
##!!!##