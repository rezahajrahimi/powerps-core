<?php
bolt_decrypt( __FILE__ , 'erMDAW'); return 0;
##!!!##CgpuYW1lc3BhY2UgQXBwXEh0dHBcQ29udHJvbGxlcnM7CnVzZSBBcHBcTW9kZWxzXFByb2R1Y3RDYXRlZ29yeTsKdXNlIEFwcFxNb2RlbHNcUHJvZHVjdDsKCnVzZSBJbGx1bWluYXRlXEh0dHBcUmVxdWVzdDsKCmNsYXNzIFByb2R1Y3RDYXRlZ29yeUNvbnRyb2xsZXIgZXh0ZW5kcyBDb250cm9sbGVyCnsKICAgIHB1YmxpYyBmdW5jdGlvbiBnZXRBbGxQcm9kY3RDYXRlZ29yeSgpCiAgICB7CiAgICAgICAgcmV0dXJuIFByb2R1Y3RDYXRlZ29yeTo6d2l0aCgncGFubmVsJyktPm9yZGVyQnkoJ2NyZWF0ZWRfYXQnKS0+Z2V0KCk7CiAgICB9CiAgICBwdWJsaWMgZnVuY3Rpb24gZ2V0UHJvZGN0Q2F0ZWdvcnlOYW1lQnlJRCgkaWQpCiAgICB7CiAgICAgICAgcmV0dXJuIFByb2R1Y3RDYXRlZ29yeTo6d2hlcmUoJ2lkJywgJGlkKS0+Zmlyc3QoKTsKICAgIH0KICAgIHB1YmxpYyBmdW5jdGlvbiBkZWxldGVQcm9kdWN0Q2F0ZWdvcnlCeUlEKCRpZCkKICAgIHsKICAgICAgIC8vIGRlbGV0ZSBwcm9kdWN0Q2F0ZWdvcnkgYnkgaWQgd2l0aCBjYXNjYWRlIGlmIGhhdmUgbm90IGFueSBwcm9kdWN0IHJlbGF0aW9uCgogICAgICAgICRkYXRhID0gUHJvZHVjdENhdGVnb3J5Ojp3aGVyZSgnaWQnLCAkaWQpLT5maXJzdCgpOwogICAgICAgIGlmICgkZGF0YSAhPSBudWxsKSB7CiAgICAgICAgICAgIGlmKCAkZGF0YS0+ZGVsZXRlKCkgIT0gbnVsbCl7CiAgICAgICAgICAgICAgICByZXR1cm4gJHRoaXMtPmdldEFsbFByb2RjdENhdGVnb3J5KCk7CiAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlKCktPmpzb24oZmFsc2UsIDQwNCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlKCktPmpzb24oZmFsc2UsIDQwNCk7CiAgICB9CiAgICBwdWJsaWMgZnVuY3Rpb24gZ2V0UHJvZGN0Q2F0ZWdvcnlCeUNhdGVnb3J5TmFtZSgkY2F0ZWdvcnlOYW1lKQogICAgewogICAgICAgIHJldHVybiBQcm9kdWN0Q2F0ZWdvcnk6OndoZXJlKCdjYXRlZ29yeV9uYW1lJywgJGNhdGVnb3J5TmFtZSktPmZpcnN0KCk7CiAgICB9CiAgICBwdWJsaWMgZnVuY3Rpb24gZ2V0QWxsUHJvZGN0Q2F0ZWdvcnlPcmRlckJ5UHJpY2UoKQogICAgewogICAgICAgIHJldHVybiBQcm9kdWN0Q2F0ZWdvcnk6Om9yZGVyQnkoJ3ByaWNlJyktPmdldCgpOwogICAgfQogICAgcHVibGljIGZ1bmN0aW9uIGdldEFsbEFjdGl2ZVByb2RjdENhdGVnb3J5T3JkZXJCeVByaWNlKCkKICAgIHsKICAgICAgICAkcGFuZWxDbnRybCA9IG5ldyBQYW5uZWxDb250cm9sbGVyKCk7CiAgICAgICAgICAgICRwYW5lbHMgPSAkcGFuZWxDbnRybC0+Z2V0X2FsbF9wYW5lbGxzX0lkX2J5X2xvY2F0aW9uX2NhcGFjaXR5X21vZGUoKTsKICAgICAgICByZXR1cm4gUHJvZHVjdENhdGVnb3J5OjpvcmRlckJ5KCdwcmljZScpLT53aGVyZSgnaXNfYWN0aXZlJywgdHJ1ZSkKICAgICAgICAtPndoZXJlKCdjYXRlZ29yeV9uYW1lJywgJyE9JywgJ9in2qnYp9mG2Kog2KLYstmF2KfbjNi024wnKQogICAgICAgIC0+d2hlcmVJbigncGFubmVsX2lkJywgJHBhbmVscykKCiAgICAgICAgLT5nZXQoKTsKCiAgICB9CiAgICBwdWJsaWMgZnVuY3Rpb24gZ2V0X2FsbF9hY3RpdmVfcHJvZGN0X2NhdGVnb3J5X2J5X3Bhbm5lbF9pZF9vcmRlcl9ieV9wcmljZSgkcGFubmVsX2lkKQogICAgewoKICAgICAgICByZXR1cm4gUHJvZHVjdENhdGVnb3J5OjpvcmRlckJ5KCdwcmljZScpLT53aGVyZSgnaXNfYWN0aXZlJywgdHJ1ZSkKICAgICAgICAtPndoZXJlKCdwYW5uZWxfaWQnLCAkcGFubmVsX2lkKQogICAgICAgIC0+d2hlcmUoJ2NhdGVnb3J5X25hbWUnLCAnIT0nLCAn2Kfaqdin2YbYqiDYotiy2YXYp9uM2LTbjCcpLT5nZXQoKTsKCiAgICB9CiAgICBwdWJsaWMgZnVuY3Rpb24gZ2V0UHJvZGN0UGFubmVsSUQoJG5hbWUsICRwYW5uZWxfaWQpCiAgICB7CiAgICAgICAgJGRhdGEgPSBQcm9kdWN0Q2F0ZWdvcnk6OndoZXJlKCdwYW5uZWxfaWQnLCAkcGFubmVsX2lkKS0+d2hlcmUoJ2NhdGVnb3J5X25hbWUnLCAkbmFtZSktPmZpcnN0KCk7CiAgICAgICAgaWYgKCRkYXRhICE9IG51bGwpIHsKICAgICAgICAgICAgcmV0dXJuICRkYXRhLT5pZDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gLTE7CiAgICAgICAgfQogICAgfQogICAgcHVibGljIGZ1bmN0aW9uIGdldFByb2R1Y3RDYXRJZEJZRXhwaXJlRGF5UGFubmVsSURWb2x1bWUoJGV4cGlyZV9kYXksICRwYW5uZWxfaWQsICR2b2x1bWUpCiAgICB7CiAgICAgICAgJGRhdGEgPSBQcm9kdWN0Q2F0ZWdvcnk6OndoZXJlKCdleHBpcmVfZGF5JywgJGV4cGlyZV9kYXkpLT53aGVyZSgncGFubmVsX2lkJywgJHBhbm5lbF9pZCktPndoZXJlKCd2b2x1bWUnLCAkdm9sdW1lKS0+Zmlyc3QoKTsKICAgICAgICBpZiAoJGRhdGEgPT0gbnVsbCkgewogICAgICAgICAgICAvLyBjcmVhdGUgYSBuZXcgY2F0ZWdvcnkgd2l0aCB0aGlzIGV4cGlyZV9kYXkgYW5kIHBhbm5lbF9pZCBhbmQgdm9sdW1lCiAgICAgICAgICAgICRkYXRhID0gbmV3IFByb2R1Y3RDYXRlZ29yeSgpOwogICAgICAgICAgICAkZGF0YS0+cGFubmVsX2lkID0gJHBhbm5lbF9pZDsKICAgICAgICAgICAgJGRhdGEtPmV4cGlyZV9kYXkgPSAkZXhwaXJlX2RheTsKICAgICAgICAgICAgJGRhdGEtPnZvbHVtZSA9ICR2b2x1bWU7CiAgICAgICAgICAgICRkYXRhLT5jYXRlZ29yeV9uYW1lID0gJ9uM2qkg2K/Ys9iq2Ycg2KjZhtiv24wg2KzYr9uM2K8gJzsKICAgICAgICAgICAgJGRhdGEtPnByaWNlID0gMDsKICAgICAgICAgICAgJGRhdGEtPnByaWNlX2luX2RvbGxhciA9IDA7CiAgICAgICAgICAgICRkYXRhLT5pc19hY3RpdmUgPSB0cnVlOwogICAgICAgICAgICAkZGF0YS0+cmVjaGFyZ2FibGUgPSB0cnVlOwogICAgICAgICAgICAkZGF0YS0+c2hvd19zdWJzY3JpcHRpb25fbGluayA9IHRydWU7CiAgICAgICAgICAgICRkYXRhLT5zaG93X3Bhbm5lbF9saW5rID0gdHJ1ZTsKCiAgICAgICAgICAgICRkYXRhLT5zYXZlKCk7CiAgICAgICAgICAgICRpZCA9ICRkYXRhLT5pZDsKICAgICAgICB9CgogICAgICAgIHJldHVybiAkZGF0YS0+aWQ7CiAgICB9CiAgICBwdWJsaWMgZnVuY3Rpb24gYWRkTmV3UHJvZHVjdENhdGVnb3J5KFJlcXVlc3QgJHJlcXVlc3QpCiAgICB7CiAgICAgICAgJGRhdGEgPSBuZXcgUHJvZHVjdENhdGVnb3J5KCk7CiAgICAgICAgJGRhdGEtPnBhbm5lbF9pZCA9ICRyZXF1ZXN0LT5wYW5uZWxfaWQ7CiAgICAgICAgJGRhdGEtPmNhdGVnb3J5X25hbWUgPSAkcmVxdWVzdC0+Y2F0ZWdvcnlfbmFtZTsKICAgICAgICAkZGF0YS0+cHJpY2UgPSAkcmVxdWVzdC0+cHJpY2U7CiAgICAgICAgJGRhdGEtPmV4cGlyZV9kYXkgPSAkcmVxdWVzdC0+ZXhwaXJlX2RheTsKICAgICAgICAkZGF0YS0+dm9sdW1lID0gJHJlcXVlc3QtPnZvbHVtZTsKICAgICAgICAkZGF0YS0+cmVjaGFyZ2FibGUgPSAkcmVxdWVzdC0+cmVjaGFyZ2FibGU7CiAgICAgICAgJGRhdGEtPnNob3dfc3Vic2NyaXB0aW9uX2xpbmsgPSAkcmVxdWVzdC0+c2hvd19zdWJzY3JpcHRpb25fbGluazsKICAgICAgICAkZGF0YS0+c2hvd19wYW5uZWxfbGluayA9ICRyZXF1ZXN0LT5zaG93X3Bhbm5lbF9saW5rOwogICAgICAgIGlmICgkcmVxdWVzdC0+cHJpY2VfaW5fZG9sbGFyICE9IG51bGwgJiYgJHJlcXVlc3QtPnByaWNlX2luX2RvbGxhciA+PSAwLjAwKSB7CiAgICAgICAgICAgICRkYXRhLT5wcmljZV9pbl9kb2xsYXIgPSAkcmVxdWVzdC0+cHJpY2VfaW5fZG9sbGFyOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICRkYXRhLT5wcmljZV9pbl9kb2xsYXIgPSAwLjA7CiAgICAgICAgfQogICAgICAgICRkYXRhLT5pc19hY3RpdmUgPSB0cnVlOwogICAgICAgIGlmICgkZGF0YS0+c2F2ZSgpKSB7CiAgICAgICAgICAgIHJldHVybiAkdGhpcy0+Z2V0QWxsUHJvZGN0Q2F0ZWdvcnkoKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgfQogICAgcHVibGljIGZ1bmN0aW9uIGVkaXRQcm9kdWN0Q2F0ZWdvcnkoUmVxdWVzdCAkcmVxdWVzdCkKICAgIHsKICAgICAgICB0cnkgewogICAgICAgICAgICAkZGF0YSA9IFByb2R1Y3RDYXRlZ29yeTo6ZmluZCgkcmVxdWVzdC0+aWQpOwogICAgICAgICAgICAkZGF0YS0+cGFubmVsX2lkID0gJHJlcXVlc3QtPnBhbm5lbF9pZDsKICAgICAgICAgICAgJGRhdGEtPmNhdGVnb3J5X25hbWUgPSAkcmVxdWVzdC0+Y2F0ZWdvcnlfbmFtZTsKICAgICAgICAgICAgJGRhdGEtPnByaWNlID0gJHJlcXVlc3QtPnByaWNlOwogICAgICAgICAgICAkZGF0YS0+ZXhwaXJlX2RheSA9ICRyZXF1ZXN0LT5leHBpcmVfZGF5OwogICAgICAgICAgICAkZGF0YS0+dm9sdW1lID0gJHJlcXVlc3QtPnZvbHVtZTsKICAgICAgICAgICAgJGRhdGEtPnJlY2hhcmdhYmxlID0gJHJlcXVlc3QtPnJlY2hhcmdhYmxlOwogICAgICAgICAgICAkZGF0YS0+c2hvd19zdWJzY3JpcHRpb25fbGluayA9ICRyZXF1ZXN0LT5zaG93X3N1YnNjcmlwdGlvbl9saW5rOwogICAgICAgICAgICAkZGF0YS0+c2hvd19wYW5uZWxfbGluayA9ICRyZXF1ZXN0LT5zaG93X3Bhbm5lbF9saW5rOwogICAgICAgICAgICAkZGF0YS0+aXNfYWN0aXZlID0gJHJlcXVlc3QtPmlzX2FjdGl2ZTsKICAgICAgICAgICAgaWYgKCRyZXF1ZXN0LT5wcmljZV9pbl9kb2xsYXIgIT0gbnVsbCAmJiAkcmVxdWVzdC0+cHJpY2VfaW5fZG9sbGFyID49IDEpIHsKICAgICAgICAgICAgICAgICRkYXRhLT5wcmljZV9pbl9kb2xsYXIgPSAkcmVxdWVzdC0+cHJpY2VfaW5fZG9sbGFyOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgJGRhdGEtPnByaWNlX2luX2RvbGxhciA9IDAuMDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCRkYXRhLT51cGRhdGUoKSkgewogICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlKCktPmpzb24oJHRoaXMtPmdldEFsbFByb2RjdENhdGVnb3J5KCksIDIwMCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UoKS0+anNvbihmYWxzZSwgNDAxKTsKICAgICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKFxUaHJvd2FibGUgJHRoKSB7CiAgICAgICAgICAgIHJldHVybiByZXNwb25zZSgpLT5qc29uKGZhbHNlLCA1MDApOwogICAgICAgIH0KICAgIH0KICAgIHB1YmxpYyBmdW5jdGlvbiBlZGl0UHJvZHVjdENhdGVnb3J5QnlOYW1lKFJlcXVlc3QgJHJlcXVlc3QpCiAgICB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgJGRhdGEgPSBQcm9kdWN0Q2F0ZWdvcnk6OndoZXJlKCdjYXRlZ29yeV9uYW1lJywgJHJlcXVlc3QtPmNhdGVnb3J5X25hbWUpLT5maXJzdCgpOwogICAgICAgICAgICAkZGF0YS0+cHJpY2UgPSAkcmVxdWVzdC0+cHJpY2U7CiAgICAgICAgICAgICRkYXRhLT5leHBpcmVfZGF5ID0gJHJlcXVlc3QtPmV4cGlyZV9kYXk7CiAgICAgICAgICAgICRkYXRhLT52b2x1bWUgPSAkcmVxdWVzdC0+dm9sdW1lOwogICAgICAgICAgICAkZGF0YS0+cmVjaGFyZ2FibGUgPSAkcmVxdWVzdC0+cmVjaGFyZ2FibGU7CiAgICAgICAgICAgICRkYXRhLT5zaG93X3N1YnNjcmlwdGlvbl9saW5rID0gJHJlcXVlc3QtPnNob3dfc3Vic2NyaXB0aW9uX2xpbms7CiAgICAgICAgICAgICRkYXRhLT5zaG93X3Bhbm5lbF9saW5rID0gJHJlcXVlc3QtPnNob3dfcGFubmVsX2xpbms7CiAgICAgICAgICAgICRkYXRhLT5pc19hY3RpdmUgPSAkcmVxdWVzdC0+aXNfYWN0aXZlOwoKICAgICAgICAgICAgaWYgKCRkYXRhLT51cGRhdGUoKSkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICB9IGNhdGNoIChcVGhyb3dhYmxlICR0aCkgewogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgfQoKICAgIHB1YmxpYyBmdW5jdGlvbiBnZXRQcm9kY3RQcmljZSgkbmFtZSwgJHNlcnZpY2V0eXBlSUQpCiAgICB7CiAgICAgICAgJGRhdGEgPSBQcm9kdWN0Q2F0ZWdvcnk6OndoZXJlKCdwYW5uZWxfaWQnLCAkcGFubmVsX2lkKS0+d2hlcmUoJ2NhdGVnb3J5X25hbWUnLCAkbmFtZSktPmZpcnN0KCk7CiAgICAgICAgaWYgKCRkYXRhICE9IG51bGwpIHsKICAgICAgICAgICAgcmV0dXJuICRkYXRhLT5wcmljZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gLTE7CiAgICAgICAgfQogICAgfQogICAgcHVibGljIGZ1bmN0aW9uIHJlQWN0aXZlUHJvZHVjdENhdGVnb3J5KCRpZCkKICAgIHsKICAgICAgICB0cnkgewogICAgICAgICAgICAkZGF0YSA9IFByb2R1Y3RDYXRlZ29yeTo6ZmluZCgkaWQpOwogICAgICAgICAgICAkZGF0YS0+aXNfYWN0aXZlID0gdHJ1ZTsKICAgICAgICAgICAgaWYgKCRkYXRhLT51cGRhdGUoKSkgewogICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlKCktPmpzb24odHJ1ZSwgMjAwKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZSgpLT5qc29uKGZhbHNlLCA0MDEpOwogICAgICAgICAgICB9CiAgICAgICAgfSBjYXRjaCAoXFRocm93YWJsZSAkdGgpIHsKICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlKCktPmpzb24oZmFsc2UsIDQwMSk7CiAgICAgICAgfQogICAgfQogICAgcHVibGljIGZ1bmN0aW9uIGRlQWN0aXZlUHJvZHVjdENhdGVnb3J5KCRpZCkKICAgIHsKICAgICAgICB0cnkgewogICAgICAgICAgICAkZGF0YSA9IFByb2R1Y3RDYXRlZ29yeTo6ZmluZCgkaWQpOwogICAgICAgICAgICAkZGF0YS0+aXNfYWN0aXZlID0gZmFsc2U7CiAgICAgICAgICAgIGlmICgkZGF0YS0+dXBkYXRlKCkpIHsKICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZSgpLT5qc29uKHRydWUsIDIwMCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UoKS0+anNvbihmYWxzZSwgNDAxKTsKICAgICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKFxUaHJvd2FibGUgJHRoKSB7CiAgICAgICAgICAgIHJldHVybiByZXNwb25zZSgpLT5qc29uKGZhbHNlLCA0MDEpOwogICAgICAgIH0KICAgIH0KICAgIHB1YmxpYyBmdW5jdGlvbiBtb3N0U2VsbGVkUHJvZHVjdENhdGVnb3J5KCRjb3VudCkKICAgIHsKICAgICAgICB0cnkgewogICAgICAgICAgICAkZGF0YSA9IFByb2R1Y3Q6OmxlZnRKb2luKCdwcm9kdWN0X2NhdGVnb3JpZXMnLCAncHJvZHVjdHMucHJvZHVjdF9jYXRlZ29yaWVzX2lkJywgJz0nLCAncHJvZHVjdF9jYXRlZ29yaWVzLmlkJyktPndoZXJlKCdwcm9kdWN0X2NhdGVnb3JpZXMuaXNfYWN0aXZlJywgdHJ1ZSktPmdyb3VwQnkoJ3Byb2R1Y3RfY2F0ZWdvcmllcy5jYXRlZ29yeV9uYW1lJyktPnNlbGVjdCgncHJvZHVjdF9jYXRlZ29yaWVzLmNhdGVnb3J5X25hbWUnLCBcREI6OnJhdygnY291bnQoKikgYXMgY291bnQnKSktPm9yZGVyQnkoJ2NvdW50JywgJ2Rlc2MnKS0+dGFrZSgkY291bnQpLT5nZXQoKTsKCiAgICAgICAgICAgIC8vICRkYXRhID0gUHJvZHVjdENhdGVnb3J5Ojp3aGVyZSgnaXNfYWN0aXZlJywgdHJ1ZSkKICAgICAgICAgICAgLy8gLT5sZWZ0Sm9pbigncHJvZHVjdHMnLCAncHJvZHVjdHMucHJvZHVjdF9jYXRlZ29yaWVzX2lkJywgJz0nLCAncHJvZHVjdF9jYXRlZ29yaWVzLmlkJykKICAgICAgICAgICAgLy8gLT5ncm91cEJ5KCdwcm9kdWN0X2NhdGVnb3JpZXMuY2F0ZWdvcnlfbmFtZScpCiAgICAgICAgICAgIC8vIC0+c2VsZWN0KCdwcm9kdWN0X2NhdGVnb3JpZXMuY2F0ZWdvcnlfbmFtZScsIFxEQjo6cmF3KCdjb3VudCgqKSBhcyBjb3VudCcpKQogICAgICAgICAgICAvLyAtPm9yZGVyQnkoJ2NvdW50JywgJ2Rlc2MnKQogICAgICAgICAgICAvLyAtPnRha2UoJGNvdW50KS0+Z2V0KCk7CiAgICAgICAgICAgIGlmICgkZGF0YSAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gJGRhdGE7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKFxUaHJvd2FibGUgJHRoKSB7CiAgICAgICAgICAgIFxMb2c6OmluZm8oJ2Vycm9yOiAnIC4gJHRoKTsKICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgfQogICAgfQogICAgcHVibGljIGZ1bmN0aW9uIGdldEFnZW50UHJvZHVjdHNOb3RTZWxlY3RlZEJ5VXNlcklEKCR1c2VySUQpCiAgICB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgcmV0dXJuIFByb2R1Y3RDYXRlZ29yeTo6d2hlcmVEb2VzbnRIYXZlKCdhZ2VudF9wcm9kdWN0cycsIGZ1bmN0aW9uICgkcXVlcnkpIHVzZSAoJHVzZXJJRCkgewogICAgICAgICAgICAgICAgJHF1ZXJ5LT53aGVyZSgnYWdlbnRfcHJvZHVjdHMudXNlcl9pZCcsICc9JywgJHVzZXJJRCk7CiAgICAgICAgICAgIH0pLT5nZXQoKTsKICAgICAgICAgICAgLy8gJHNlbGVjdGVkID0gIFByb2R1Y3RDYXRlZ29yeTo6d2l0aCgnYWdlbnRfcHJvZHVjdHMnKQogICAgICAgICAgICAvLyAtPndoZXJlSGFzKCdhZ2VudF9wcm9kdWN0cycsIGZ1bmN0aW9uICgkcXVlcnkpIHVzZSgkdXNlcklEKSB7CiAgICAgICAgICAgIC8vICAgICAkcXVlcnktPndoZXJlKCdhZ2VudF9wcm9kdWN0cy51c2VyX2lkJywgJz0nLCAkdXNlcklEKTsKICAgICAgICAgICAgLy8gfSktPmdldCgpOwoKICAgICAgICAgICAgLy8gcmV0dXJuIHJlc3BvbnNlKCktPmpzb24oWyAnc2VsZWN0ZWQnPT4gJHNlbGVjdGVkLCdub3Rfc2VsZWN0ZWQnPT4gJG5vdF9zZWxlY3RlZF0sIDIwMCk7CiAgICAgICAgfSBjYXRjaCAoXFRocm93YWJsZSAkdGgpIHsKICAgICAgICAgICAgXExvZzo6aW5mbygkdGgpOwogICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UoKS0+anNvbihudWxsLCA1MDApOwogICAgICAgIH0KICAgIH0KfQo=