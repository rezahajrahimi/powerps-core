<?php
bolt_decrypt( __FILE__ , 'BSpxG3'); return 0;
##!!!##