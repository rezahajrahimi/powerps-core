<?php
bolt_decrypt( __FILE__ , 'V6EerP'); return 0;
##!!!##