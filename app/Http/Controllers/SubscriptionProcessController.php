<?php
bolt_decrypt( __FILE__ , '6kAatA'); return 0;
##!!!##