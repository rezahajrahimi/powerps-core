<?php
bolt_decrypt( __FILE__ , 'K4crVM'); return 0;
##!!!##