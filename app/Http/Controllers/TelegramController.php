<?php
bolt_decrypt( __FILE__ , '9hdW1U'); return 0;
##!!!##