<?php
bolt_decrypt( __FILE__ , '8KNCqr'); return 0;
##!!!##