<?php
bolt_decrypt( __FILE__ , 'r7Um7e'); return 0;
##!!!##