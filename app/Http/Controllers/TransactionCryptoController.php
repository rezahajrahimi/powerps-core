<?php
bolt_decrypt( __FILE__ , '3MgnMU'); return 0;
##!!!##