<?php
bolt_decrypt( __FILE__ , 'SHiOMB'); return 0;
##!!!##