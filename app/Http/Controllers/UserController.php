<?php
bolt_decrypt( __FILE__ , '0NcMPy'); return 0;
##!!!##