<?php
bolt_decrypt( __FILE__ , 'EK9xs6'); return 0;
##!!!##