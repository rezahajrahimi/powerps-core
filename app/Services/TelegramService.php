<?php
bolt_decrypt( __FILE__ , 'YBYHJq'); return 0;
##!!!##